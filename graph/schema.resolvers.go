package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	dbmodel "typebeast-service/database/model"
	"typebeast-service/graph/model"

	"github.com/clerkinc/clerk-sdk-go/clerk"
	"go.uber.org/zap"
)

// CreateWritingSample is the resolver for the createWritingSample field.
func (r *mutationResolver) CreateWritingSample(ctx context.Context, input model.CreateWritingSampleInput) (*model.WritingSample, error) {
	logger, _ := zap.NewProduction()
	defer logger.Sync()
	logger.Info("Creating sample!")

	claims, ok := clerk.SessionFromContext(ctx)
	if !ok {
		return nil, fmt.Errorf("Invalid session claims")
	}

	sample := dbmodel.WritingSample{
		Title:   input.Title,
		Content: input.Content,
		UserID:  claims.Subject,
	}
	r.DB.Create(&sample)

	return &model.WritingSample{
		ID:      sample.ID,
		Title:   sample.Title,
		Content: sample.Content,
	}, nil
}

// CreateLink is the resolver for the createLink field.
func (r *mutationResolver) CreateLink(ctx context.Context, input model.NewLink) (*model.Link, error) {
	panic(fmt.Errorf("not implemented: CreateLink - createLink"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (string, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (string, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (string, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// Links is the resolver for the links field.
func (r *queryResolver) Links(ctx context.Context) ([]*model.Link, error) {
	panic(fmt.Errorf("not implemented: Links - links"))
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	logger, _ := zap.NewProduction()
	defer logger.Sync()
	logger.Info("Getting user!")
	return &model.User{ID: id, Name: "GALACTUS"}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
